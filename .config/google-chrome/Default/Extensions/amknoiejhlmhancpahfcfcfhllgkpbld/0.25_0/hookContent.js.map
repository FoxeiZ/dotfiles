{"mappings":"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","sources":["src/hookContent.js"],"sourcesContent":[";(() => {\n  const defineSubscribableObject = (obj) =>\n    new Proxy(\n      {\n        ...obj,\n        _subscribers: {},\n        subscribe: function (prop, func) {\n          if (Array.isArray(this._subscribers[prop])) {\n            this._subscribers[prop].push(func)\n          } else {\n            this._subscribers[prop] = [func]\n          }\n        },\n      },\n      {\n        set(obj, prop, newVal) {\n          obj[prop] = newVal\n\n          if (Array.isArray(obj._subscribers[prop])) {\n            for (let subscriber of obj._subscribers[prop]) {\n              subscriber(newVal)\n            }\n          }\n\n          return true\n        },\n      }\n    )\n\n  if (window.__HOPP_EXTENSION_STATUS_PROXY__) {\n    window.__HOPP_EXTENSION_STATUS_PROXY__.status = \"available\"\n  } else {\n    window.__HOPP_EXTENSION_STATUS_PROXY__ = defineSubscribableObject({\n      status: \"available\",\n    })\n  }\n\n  window.__POSTWOMAN_EXTENSION_HOOK__ = {\n    getVersion: () => ({ major: 0, minor: 25 }),\n\n    decodeB64ToArrayBuffer: (input, ab) => {\n      const keyStr =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n\n      const bytes = parseInt((input.length / 4) * 3, 10)\n\n      let uarray\n      let chr1, chr2, chr3\n      let enc1, enc2, enc3, enc4\n      let i = 0\n      let j = 0\n\n      if (ab) uarray = new Uint8Array(ab)\n      else uarray = new Uint8Array(bytes)\n\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\")\n\n      for (i = 0; i < bytes; i += 3) {\n        //get the 3 octects in 4 ascii chars\n        enc1 = keyStr.indexOf(input.charAt(j++))\n        enc2 = keyStr.indexOf(input.charAt(j++))\n        enc3 = keyStr.indexOf(input.charAt(j++))\n        enc4 = keyStr.indexOf(input.charAt(j++))\n\n        chr1 = (enc1 << 2) | (enc2 >> 4)\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)\n        chr3 = ((enc3 & 3) << 6) | enc4\n\n        uarray[i] = chr1\n        if (enc3 != 64) uarray[i + 1] = chr2\n        if (enc4 != 64) uarray[i + 2] = chr3\n      }\n\n      return uarray\n    },\n\n    transformFormData: async (config) => {\n      const toBase64 = (file) =>\n        new Promise((resolve, reject) => {\n          const reader = new FileReader()\n          reader.readAsDataURL(file)\n          reader.onload = () => resolve(reader.result)\n          reader.onerror = (error) => reject(error)\n        })\n\n      if (config.data instanceof FormData) {\n        config.formFiles = []\n        config.formData = []\n\n        const entries = Array.from(config.data.entries())\n\n        for (const [key, value] of entries) {\n          if (value instanceof File) {\n            const convertedValue = await toBase64(value)\n\n            config.formFiles.push({\n              key: key,\n              value: convertedValue,\n              filename: value.name,\n            })\n          } else {\n            config.formData.push({\n              key: key,\n              value: value,\n            })\n          }\n        }\n\n        config.data = null\n\n        return config\n      }\n    },\n\n    cancelRequest: (config) => {\n      window.postMessage(\n        {\n          type: \"__POSTWOMAN_EXTENSION_CANCEL__\",\n        },\n        \"*\"\n      )\n    },\n\n    sendRequest: (config) =>\n      new Promise((resolve, reject) => {\n        function handleMessage(ev) {\n          if (ev.source !== window || !ev.data) {\n            return\n          }\n\n          if (ev.data.type === \"__POSTWOMAN_EXTENSION_RESPONSE__\") {\n            // Apply transformation from base64 to arraybuffer\n            if (ev.data.isBinary) {\n              const bytes = (ev.data.response.data.length / 4) * 3\n              const ab = new ArrayBuffer(bytes)\n              window.__POSTWOMAN_EXTENSION_HOOK__.decodeB64ToArrayBuffer(\n                ev.data.response.data,\n                ab\n              )\n\n              ev.data.response.data = ab\n            }\n\n            resolve(ev.data.response)\n            window.removeEventListener(\"message\", handleMessage)\n          } else if (ev.data.type === \"__POSTWOMAN_EXTENSION_ERROR__\") {\n            const error = ev.data.error\n\n            // We're restoring the original Error object here\n            const e = new Error(error.message, error.fileName, error.lineNumber)\n            e.name = error.name\n            e.stack = error.stack\n            if (error.response) {\n              e.response = error.response\n\n              const bytes = (e.response.data.length / 4) * 3\n              const ab = new ArrayBuffer(bytes)\n\n              window.__POSTWOMAN_EXTENSION_HOOK__.decodeB64ToArrayBuffer(\n                e.response.data,\n                ab\n              )\n              e.response.data = ab\n            }\n            reject(e)\n            window.removeEventListener(\"message\", handleMessage)\n          }\n        }\n\n        window.addEventListener(\"message\", handleMessage)\n\n        window.__POSTWOMAN_EXTENSION_HOOK__\n          .transformFormData(config)\n          .then((transformedConfig) => {\n            window.postMessage(\n              {\n                type: \"__POSTWOMAN_EXTENSION_REQUEST__\",\n                config,\n              },\n              \"*\"\n            )\n          })\n      }),\n  }\n})()\n"],"names":["obj1","window","__HOPP_EXTENSION_STATUS_PROXY__","status","Proxy","_subscribers","subscribe","prop","func","Array","isArray","this","push","set","obj","newVal","subscriber","__POSTWOMAN_EXTENSION_HOOK__","getVersion","major","minor","decodeB64ToArrayBuffer","input","ab","keyStr","bytes","parseInt","length","uarray","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","j","Uint8Array","replace","indexOf","charAt","transformFormData","async","config","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","data","FormData","formFiles","formData","entries","from","key","value","File","convertedValue","filename","name","cancelRequest","postMessage","type","sendRequest","addEventListener","handleMessage","ev","source","isBinary","response","ArrayBuffer","removeEventListener","e","Error","message","fileName","lineNumber","stack","then","transformedConfig"],"version":3,"file":"hookContent.js.map"}